const axios = require('axios');
const { PrismaClient } = require('@prisma/client');

const BASE_URL = 'http://localhost:5000/api';
const prisma = new PrismaClient();

async function diagnosePlayerAccess() {
  console.log('üîç Diagnostic complet de l\'acc√®s Player...\n');
  
  try {
    // 1. V√©rifier la base de donn√©es
    console.log('1. V√©rification de la base de donn√©es...');
    const tenants = await prisma.tenant.findMany();
    const users = await prisma.user.findMany();
    const teams = await prisma.team.findMany();
    const players = await prisma.player.findMany();
    const tournaments = await prisma.tournament.findMany();
    const matches = await prisma.match.findMany();
    
    console.log('üìä √âtat de la base de donn√©es:');
    console.log(`   - Tenants: ${tenants.length}`);
    console.log(`   - Utilisateurs: ${users.length}`);
    console.log(`   - √âquipes: ${teams.length}`);
    console.log(`   - Joueurs: ${players.length}`);
    console.log(`   - Tournois: ${tournaments.length}`);
    console.log(`   - Matchs: ${matches.length}`);
    
    if (teams.length === 0 && players.length === 0 && tournaments.length === 0) {
      console.log('\n‚ö†Ô∏è  Base de donn√©es vide! Ajout de donn√©es de test...');
      
      // Cr√©er un tenant par d√©faut
      const tenant = await prisma.tenant.create({
        data: {
          name: '7ouma Ligue',
          description: 'Ligue de quartier'
        }
      });
      console.log('‚úÖ Tenant cr√©√©:', tenant.name);
      
      // Cr√©er des √©quipes
      const teamsData = [
        { name: 'FC Lions', coachName: 'Coach Ahmed', description: '√âquipe du quartier nord' },
        { name: 'Eagles FC', coachName: 'Coach Youssef', description: '√âquipe du quartier sud' },
        { name: 'Titans United', coachName: 'Coach Karim', description: '√âquipe du quartier est' }
      ];
      
      const createdTeams = [];
      for (const teamData of teamsData) {
        const team = await prisma.team.create({
          data: { ...teamData, tenantId: tenant.id }
        });
        createdTeams.push(team);
        console.log('‚úÖ √âquipe cr√©√©e:', team.name);
      }
      
      // Cr√©er des joueurs
      const playersData = [
        { name: 'Ahmed Ben Ali', position: 'Attaquant', level: 4, age: 25, jerseyNumber: 10, teamId: createdTeams[0].id },
        { name: 'Youssef El Amrani', position: 'Milieu', level: 3, age: 23, jerseyNumber: 8, teamId: createdTeams[0].id },
        { name: 'Karim Mansouri', position: 'D√©fenseur', level: 4, age: 27, jerseyNumber: 4, teamId: createdTeams[1].id }
      ];
      
      for (const playerData of playersData) {
        const player = await prisma.player.create({
          data: { ...playerData, tenantId: tenant.id }
        });
        console.log('‚úÖ Joueur cr√©√©:', player.name);
      }
      
      // Cr√©er un tournoi
      const tournament = await prisma.tournament.create({
        data: {
          name: 'Coupe du Printemps 2025',
          startDate: new Date('2025-03-01'),
          endDate: new Date('2025-04-30'),
          prize: 'Troph√©e + 5000 DT',
          rules: 'R√®glement standard de mini-foot',
          numberOfGroups: 2,
          status: 'active',
          tenantId: tenant.id
        }
      });
      console.log('‚úÖ Tournoi cr√©√©:', tournament.name);
      
      // Cr√©er des matchs
      const matchesData = [
        {
          date: new Date('2025-03-15'),
          time: '14:00',
          venue: 'Stade Municipal',
          homeTeam: createdTeams[0].name,
          awayTeam: createdTeams[1].name,
          homeScore: 2,
          awayScore: 1,
          status: 'completed',
          tournamentId: tournament.id,
          tenantId: tenant.id
        }
      ];
      
      for (const matchData of matchesData) {
        const match = await prisma.match.create({
          data: matchData
        });
        console.log('‚úÖ Match cr√©√©:', `${match.homeTeam} vs ${match.awayTeam}`);
      }
      
      console.log('\n‚úÖ Donn√©es de test ajout√©es!');
    } else {
      console.log('\n‚úÖ Base de donn√©es contient des donn√©es');
    }
    
    // 2. V√©rifier le serveur
    console.log('\n2. V√©rification du serveur...');
    try {
      await axios.get(`${BASE_URL}/health`);
      console.log('‚úÖ Serveur accessible');
    } catch (error) {
      console.log('‚ùå Serveur non accessible. D√©marrez avec: npm run dev');
      return;
    }
    
    // 3. Cr√©er un compte player de test
    console.log('\n3. Cr√©ation d\'un compte player de test...');
    const playerData = {
      name: 'Test Player Access',
      email: 'playeraccess@test.com',
      password: 'password123',
      role: 'player'
    };
    
    let token;
    try {
      const registerResponse = await axios.post(`${BASE_URL}/auth/register`, playerData);
      token = registerResponse.data.data.token;
      console.log('‚úÖ Compte player cr√©√© avec le r√¥le:', registerResponse.data.data.user.role);
    } catch (error) {
      console.log('‚ö†Ô∏è  Compte existe d√©j√†, tentative de connexion...');
      try {
        const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
          email: playerData.email,
          password: playerData.password
        });
        token = loginResponse.data.data.token;
        console.log('‚úÖ Connexion r√©ussie avec le r√¥le:', loginResponse.data.data.user.role);
      } catch (loginError) {
        console.log('‚ùå Impossible de cr√©er ou connecter le compte de test');
        return;
      }
    }
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    // 4. Test d√©taill√© de chaque endpoint
    console.log('\n4. Test d√©taill√© des endpoints...');
    
    const endpoints = [
      { name: 'Tournois', url: '/tournaments' },
      { name: '√âquipes', url: '/teams' },
      { name: 'Joueurs', url: '/players' },
      { name: 'Matchs', url: '/matches' }
    ];
    
    for (const endpoint of endpoints) {
      console.log(`\nüîç Test de ${endpoint.name}...`);
      try {
        const response = await axios.get(`${BASE_URL}${endpoint.url}`, { headers });
        console.log(`‚úÖ ${endpoint.name} - Status: ${response.status}`);
        console.log(`   - Donn√©es re√ßues: ${response.data.data?.length || 0} √©l√©ments`);
        
        if (response.data.data?.length > 0) {
          const firstItem = response.data.data[0];
          if (endpoint.name === 'Tournois') {
            console.log(`   - Premier tournoi: ${firstItem.name} (Status: ${firstItem.status})`);
          } else if (endpoint.name === '√âquipes') {
            console.log(`   - Premi√®re √©quipe: ${firstItem.name} (Coach: ${firstItem.coachName})`);
          } else if (endpoint.name === 'Joueurs') {
            console.log(`   - Premier joueur: ${firstItem.name} (${firstItem.position}, Niveau: ${firstItem.level})`);
          } else if (endpoint.name === 'Matchs') {
            console.log(`   - Premier match: ${firstItem.homeTeam} vs ${firstItem.awayTeam} (${firstItem.homeScore}-${firstItem.awayScore})`);
          }
        } else {
          console.log(`   ‚ö†Ô∏è  Aucune donn√©e trouv√©e pour ${endpoint.name}`);
        }
        
      } catch (error) {
        console.log(`‚ùå Erreur ${endpoint.name}:`);
        console.log(`   - Status: ${error.response?.status}`);
        console.log(`   - Message: ${error.response?.data?.error || error.message}`);
        
        if (error.response?.status === 401) {
          console.log(`   - Probl√®me: Token invalide ou expir√©`);
        } else if (error.response?.status === 403) {
          console.log(`   - Probl√®me: Permissions insuffisantes`);
        } else if (error.response?.status === 404) {
          console.log(`   - Probl√®me: Endpoint non trouv√©`);
        } else if (error.response?.status === 500) {
          console.log(`   - Probl√®me: Erreur serveur`);
        }
      }
    }
    
    // 5. V√©rifier les permissions sp√©cifiques
    console.log('\n5. Test des permissions sp√©cifiques...');
    
    // Test cr√©ation (doit √©chouer)
    try {
      await axios.post(`${BASE_URL}/tournaments`, {
        name: 'Test Tournament',
        startDate: '2025-01-01',
        endDate: '2025-01-31',
        numberOfGroups: 2
      }, { headers });
      console.log('‚ö†Ô∏è  Cr√©ation tournoi autoris√©e (inattendu pour player)');
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ Cr√©ation tournoi correctement refus√©e (403)');
      } else {
        console.log(`‚ùå Erreur inattendue cr√©ation tournoi: ${error.response?.status}`);
      }
    }
    
    // Test modification (doit √©chouer)
    try {
      await axios.put(`${BASE_URL}/teams/test`, {
        name: 'Test Team Updated'
      }, { headers });
      console.log('‚ö†Ô∏è  Modification √©quipe autoris√©e (inattendu pour player)');
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ Modification √©quipe correctement refus√©e (403)');
      } else {
        console.log(`‚ùå Erreur inattendue modification √©quipe: ${error.response?.status}`);
      }
    }
    
    console.log('\nüéØ Diagnostic termin√©!');
    console.log('\nüí° Si vous voyez des erreurs 401/403, le probl√®me est d\'authentification/permissions');
    console.log('üí° Si vous voyez des erreurs 500, le probl√®me est serveur');
    console.log('üí° Si vous voyez 0 donn√©es, la base est vide');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.response?.data || error.message);
  } finally {
    await prisma.$disconnect();
  }
}

diagnosePlayerAccess().catch(console.error); 