const axios = require('axios');

async function diagnosticStadiums() {
  console.log('üîç Diagnostic - Probl√®me 404 Stadiums');
  console.log('=====================================\n');
  
  try {
    // Test 1: V√©rifier si le serveur r√©pond
    console.log('1Ô∏è‚É£ Test de connectivit√© du serveur...');
    try {
      const response = await axios.get('http://localhost:5000/api/test', {
        timeout: 3000
      });
      console.log('‚úÖ Serveur accessible');
      console.log('üìä R√©ponse:', response.data);
    } catch (error) {
      console.log('‚ùå Serveur non accessible:', error.message);
      console.log('üí° D√©marrez le serveur avec: npm run dev');
      return;
    }
    
    // Test 2: V√©rifier la route de test des stades
    console.log('\n2Ô∏è‚É£ Test de la route de test des stades...');
    try {
      const response = await axios.get('http://localhost:5000/api/stadiums/test', {
        timeout: 5000
      });
      console.log('‚úÖ Route de test accessible');
      console.log('üìä Donn√©es:', response.data);
    } catch (error) {
      console.log('‚ùå Route de test √©chou√©e:', error.message);
      if (error.response) {
        console.log('   Status:', error.response.status);
        console.log('   Data:', error.response.data);
      }
    }
    
    // Test 3: V√©rifier la route publique des stades
    console.log('\n3Ô∏è‚É£ Test de la route publique des stades...');
    try {
      const response = await axios.get('http://localhost:5000/api/stadiums/public', {
        timeout: 5000
      });
      console.log('‚úÖ Route publique accessible');
      console.log(`üìä Nombre de stades: ${response.data.data?.length || 0}`);
      
      if (response.data.data && response.data.data.length > 0) {
        console.log('üìã Stades disponibles:');
        response.data.data.forEach((stadium, index) => {
          console.log(`  ${index + 1}. ${stadium.name} - ${stadium.city}`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucun stade via API');
      }
    } catch (error) {
      console.log('‚ùå Route publique √©chou√©e:', error.message);
      if (error.response) {
        console.log('   Status:', error.response.status);
        console.log('   Data:', error.response.data);
      }
    }
    
    // Test 4: V√©rifier les routes disponibles
    console.log('\n4Ô∏è‚É£ V√©rification des routes disponibles...');
    try {
      const response = await axios.get('http://localhost:5000/api/debug/routes', {
        timeout: 5000
      });
      console.log('‚úÖ Routes disponibles:');
      const stadiumRoutes = response.data.routes.filter(route => 
        route.path.includes('stadium')
      );
      stadiumRoutes.forEach(route => {
        console.log(`   ${route.methods.join(',')} ${route.path}`);
      });
    } catch (error) {
      console.log('‚ùå Impossible de r√©cup√©rer les routes:', error.message);
    }
    
    console.log('\nüéØ Solutions possibles:');
    console.log('1. Red√©marrer le serveur: npm run dev');
    console.log('2. V√©rifier que le port 5000 est libre');
    console.log('3. V√©rifier les logs du serveur pour les erreurs');
    console.log('4. Tester avec curl: curl http://localhost:5000/api/stadiums/public');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

diagnosticStadiums(); 