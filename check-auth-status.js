const axios = require('axios');
const { PrismaClient } = require('@prisma/client');

async function checkAuthStatus() {
  console.log('üîê V√©rification de l\'√©tat d\'authentification');
  console.log('=============================================\n');

  const prisma = new PrismaClient();

  try {
    // 1. V√©rifier les utilisateurs existants
    console.log('1Ô∏è‚É£ V√©rification des utilisateurs...');
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        tenantId: true
      }
    });

    console.log(`üìä Nombre d'utilisateurs: ${users.length}`);
    users.forEach((user, index) => {
      console.log(`  ${index + 1}. ${user.name} (${user.email}) - ${user.role}`);
    });

    if (users.length === 0) {
      console.log('‚ö†Ô∏è Aucun utilisateur trouv√©, cr√©ation d\'un utilisateur admin...');
      
      const adminUser = await prisma.user.create({
        data: {
          name: 'Admin Principal',
          email: 'admin@example.com',
          password: '$2b$10$test', // Mot de passe temporaire
          role: 'admin',
          tenantId: 1
        }
      });
      
      console.log('‚úÖ Utilisateur admin cr√©√©:', adminUser.id);
    }

    // 2. V√©rifier les tenants
    console.log('\n2Ô∏è‚É£ V√©rification des tenants...');
    const tenants = await prisma.tenant.findMany();
    console.log(`üìä Nombre de tenants: ${tenants.length}`);
    
    if (tenants.length === 0) {
      console.log('‚ö†Ô∏è Aucun tenant trouv√©, cr√©ation d\'un tenant par d√©faut...');
      
      const defaultTenant = await prisma.tenant.create({
        data: {
          name: 'Tenant Principal',
          description: 'Tenant par d√©faut'
        }
      });
      
      console.log('‚úÖ Tenant par d√©faut cr√©√©:', defaultTenant.id);
    }

    // 3. Tester l'authentification
    console.log('\n3Ô∏è‚É£ Test d\'authentification...');
    
    // Essayer de se connecter avec le premier utilisateur
    const testUser = users[0] || await prisma.user.findFirst();
    
    if (testUser) {
      try {
        console.log(`üîë Tentative de connexion avec: ${testUser.email}`);
        
        const loginResponse = await axios.post('http://localhost:5000/api/auth/login', {
          email: testUser.email,
          password: 'password123' // Mot de passe par d√©faut
        });

        if (loginResponse.data.success) {
          console.log('‚úÖ Connexion r√©ussie');
          console.log('üìã Token obtenu:', loginResponse.data.data?.token ? 'Oui' : 'Non');
          
          // Tester la cr√©ation de tournoi avec le token
          const token = loginResponse.data.data?.token;
          if (token) {
            console.log('\n4Ô∏è‚É£ Test de cr√©ation de tournoi avec authentification...');
            
            const tournamentData = {
              name: "Tournoi Test Auth",
              startDate: "2024-02-15",
              endDate: "2024-02-20",
              numberOfGroups: 2,
              stadium: "Stade Test"
            };

            try {
              const createResponse = await axios.post('http://localhost:5000/api/tournaments', tournamentData, {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              });

              console.log('‚úÖ Cr√©ation de tournoi r√©ussie avec authentification');
              console.log('üìä ID du tournoi:', createResponse.data.data?.id);

              // Nettoyer le tournoi de test
              if (createResponse.data.data?.id) {
                await prisma.tournament.delete({
                  where: { id: createResponse.data.data.id }
                });
                console.log('üßπ Tournoi de test supprim√©');
              }

            } catch (error) {
              console.log('‚ùå Erreur cr√©ation tournoi avec token:', error.message);
              if (error.response) {
                console.log('   Status:', error.response.status);
                console.log('   Data:', error.response.data);
              }
            }
          }
        } else {
          console.log('‚ùå √âchec de la connexion');
          console.log('üìã R√©ponse:', loginResponse.data);
        }
        
      } catch (error) {
        console.log('‚ùå Erreur lors de la connexion:', error.message);
        if (error.response) {
          console.log('   Status:', error.response.status);
          console.log('   Data:', error.response.data);
        }
      }
    }

    // 4. Instructions pour l'utilisateur
    console.log('\nüí° Instructions pour r√©soudre l\'erreur 400:');
    console.log('1. Ouvrez le frontend: http://localhost:3000');
    console.log('2. Allez dans "Connexion" ou "Login"');
    console.log('3. Connectez-vous avec:');
    console.log('   - Email: admin@example.com');
    console.log('   - Mot de passe: password123');
    console.log('4. V√©rifiez que le token est stock√© dans localStorage');
    console.log('5. Testez la cr√©ation de tournoi');

    // 5. V√©rifier localStorage dans le navigateur
    console.log('\nüîç Pour v√©rifier le token dans le navigateur:');
    console.log('1. Ouvrez les outils de d√©veloppement (F12)');
    console.log('2. Allez dans l\'onglet "Console"');
    console.log('3. Tapez: console.log(localStorage.getItem("token"))');
    console.log('4. Si le r√©sultat est "null", vous n\'√™tes pas connect√©');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkAuthStatus(); 