const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

async function testMatchCreation() {
  console.log('‚öΩ Test de cr√©ation de matchs...\n');

  try {
    // Test 1: V√©rifier que le serveur fonctionne
    console.log('1Ô∏è‚É£ Test de la route de base...');
    try {
      const response = await axios.get(`${BASE_URL}/test`);
      console.log('‚úÖ Serveur fonctionne:', response.data);
    } catch (error) {
      console.log('‚ùå Serveur ne r√©pond pas:', error.message);
      console.log('üí° D√©marrez le serveur avec: npm run dev');
      return;
    }

    // Test 2: R√©cup√©rer des donn√©es r√©elles pour le test
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des donn√©es de test...');
    let teams = [];
    let tournaments = [];
    let groups = [];

    try {
      // R√©cup√©rer les √©quipes
      const teamsResponse = await axios.get(`${BASE_URL}/teams`);
      teams = teamsResponse.data?.data || [];
      console.log(`‚úÖ ${teams.length} √©quipes trouv√©es`);

      // R√©cup√©rer les tournois
      const tournamentsResponse = await axios.get(`${BASE_URL}/tournaments`);
      tournaments = tournamentsResponse.data?.data || [];
      console.log(`‚úÖ ${tournaments.length} tournois trouv√©s`);

      // R√©cup√©rer les groupes (si disponibles)
      try {
        const groupsResponse = await axios.get(`${BASE_URL}/groups`);
        groups = groupsResponse.data?.data || [];
        console.log(`‚úÖ ${groups.length} groupes trouv√©s`);
      } catch (error) {
        console.log('‚ö†Ô∏è Pas de groupes disponibles');
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error.message);
      console.log('üí° V√©rifiez que vous avez des √©quipes et tournois dans la base de donn√©es');
      return;
    }

    // Test 3: Cr√©er un match de test avec des donn√©es r√©elles
    console.log('\n3Ô∏è‚É£ Test de cr√©ation de match...');
    
    if (teams.length < 2) {
      console.log('‚ùå Pas assez d\'√©quipes pour cr√©er un match (minimum 2)');
      console.log('üí° Cr√©ez d\'abord des √©quipes dans le frontend');
      return;
    }

    if (tournaments.length === 0) {
      console.log('‚ùå Aucun tournoi trouv√©');
      console.log('üí° Cr√©ez d\'abord un tournoi dans le frontend');
      return;
    }

    try {
      const matchData = {
        date: '2024-08-02',
        time: '15:00',
        venue: 'Stade Test',
        homeTeam: teams[0].id,
        tournamentId: tournaments[0].id,
        groupId: groups.length > 0 ? groups[0].id : undefined
      };

      console.log('üì§ Donn√©es du match:', {
        ...matchData,
        homeTeamName: teams[0].name,
        tournamentName: tournaments[0].name
      });
      
      const createResponse = await axios.post(`${BASE_URL}/matches`, matchData);
      console.log('‚úÖ Match cr√©√© avec succ√®s:', {
        id: createResponse.data?.data?.id,
        date: createResponse.data?.data?.date,
        status: createResponse.data?.success
      });
    } catch (error) {
      console.log('‚ùå Erreur cr√©ation match:', {
        status: error.response?.status,
        message: error.response?.data?.message || error.message,
        data: error.response?.data
      });
      
      // Afficher plus de d√©tails pour le debug
      if (error.response?.data?.message) {
        console.log('üîç D√©tails de l\'erreur:', error.response.data.message);
      }
    }

    // Test 4: R√©cup√©rer les matchs
    console.log('\n4Ô∏è‚É£ Test de r√©cup√©ration des matchs...');
    try {
      const matchesResponse = await axios.get(`${BASE_URL}/matches`);
      console.log('‚úÖ Matchs r√©cup√©r√©s:', {
        count: matchesResponse.data?.data?.length || 0,
        status: matchesResponse.data?.success
      });
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration matchs:', {
        status: error.response?.status,
        message: error.response?.data?.message || error.message
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter les tests
testMatchCreation(); 