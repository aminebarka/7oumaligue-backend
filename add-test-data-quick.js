const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function addTestData() {
  console.log('üöÄ Ajout de donn√©es de test...\n');

  try {
    // 1. Cr√©er un tournoi de test
    console.log('1Ô∏è‚É£ Cr√©ation du tournoi...');
    const tournament = await prisma.tournament.create({
      data: {
        name: 'Tournoi Test',
        description: 'Tournoi pour tester la cr√©ation de matchs',
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 jours
        status: 'upcoming',
        maxTeams: 8,
        numberOfGroups: 2,
        teamsPerGroup: 4,
      }
    });
    console.log('‚úÖ Tournoi cr√©√©:', tournament.name);

    // 2. Cr√©er des √©quipes de test
    console.log('\n2Ô∏è‚É£ Cr√©ation des √©quipes...');
    const teams = [];
    for (let i = 1; i <= 4; i++) {
      const team = await prisma.team.create({
        data: {
          name: `√âquipe Test ${i}`,
          logo: '‚öΩ',
          players: ['Joueur 1', 'Joueur 2', 'Joueur 3'],
        }
      });
      teams.push(team);
      console.log(`‚úÖ √âquipe cr√©√©e: ${team.name}`);
    }

    // 3. Cr√©er des groupes
    console.log('\n3Ô∏è‚É£ Cr√©ation des groupes...');
    const groups = [];
    for (let i = 1; i <= 2; i++) {
      const group = await prisma.group.create({
        data: {
          name: `Groupe ${i}`,
          tournamentId: tournament.id,
        }
      });
      groups.push(group);
      console.log(`‚úÖ Groupe cr√©√©: ${group.name}`);
    }

    // 4. Ajouter les √©quipes aux groupes
    console.log('\n4Ô∏è‚É£ Ajout des √©quipes aux groupes...');
    for (let i = 0; i < teams.length; i++) {
      const groupIndex = Math.floor(i / 2); // 2 √©quipes par groupe
      await prisma.groupTeam.create({
        data: {
          groupId: groups[groupIndex].id,
          teamId: teams[i].id,
        }
      });
      console.log(`‚úÖ ${teams[i].name} ajout√©e au ${groups[groupIndex].name}`);
    }

    console.log('\nüéâ Donn√©es de test cr√©√©es avec succ√®s!');
    console.log('\nüìä R√©sum√©:');
    console.log(`- Tournoi: ${tournament.name} (ID: ${tournament.id})`);
    console.log(`- √âquipes: ${teams.length} cr√©√©es`);
    console.log(`- Groupes: ${groups.length} cr√©√©s`);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestData(); 